{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/**\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\n */\npragma solidity ^0.8.0;\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \"./AutomationCompatibleInterface.sol\";\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "contracts/Jackpot.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\";\n\n// People should fund the contract\n// When there are at least two people that have funded the contract, a Countdown will start\n// After the countdown, the winner will be picked. The more eth a user has entered, the higher his chances to win\n// There should be a max and a min amount of eth that someone can enter with\n// When a winner is picked, the winner should be payed 95% of the contracts balance\n// The remaining 5% balance will be send to the smart contracts creator address\n\n// Errors\nerror Jackpot_NotEnoughEthEntered();\nerror Jackpot_TooMuchEthEntered();\nerror Jackpot_NotOpen();\nerror Jackpot_UpkeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\nerror Jackpot__NoWinnerFound(uint256 randomWord);\nerror Jackpot_TansferToWinnerFailed(address winner, uint256 winAmount);\nerror Jackpot_TansferToOwnerFailed(uint256 feeAmount);\nerror Jackpot_NotOwner();\n\ncontract Jackpot is VRFConsumerBaseV2, KeeperCompatibleInterface {\n    // Type declaration\n    enum GameState {\n        WAITING,\n        OPEN,\n        CALCULATING\n    }\n\n    // Jackpot Variables\n    // constants\n    uint32 private constant RANDOM_WORDS = 1;\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\n\n    // VRF Variables\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\n    bytes32 private immutable i_gasLane;\n    uint64 private immutable i_subscriptionId;\n    uint32 private immutable i_callbackGasLimit;\n    // Immutabels\n    address payable private i_owner; // the address of the contract creator (immutable)\n    uint256 private immutable i_entranceFee_min; // The min amount for entering the jackpot game\n    uint256 private immutable i_entranceFee_max; // the max amount for entering the jackpot game\n    uint32 private i_winRate; // the win amount percentage (0-100) (immutable)\n    uint256 private i_gameTime; // the time amount that starts after two players have entered the jackpot (immutable)\n    // Storage Variables\n    address payable[] private s_players;\n    mapping(address => uint256) private s_addressToAmount; // the player addresses as a mapping with the amount of eth they funded (state)\n    GameState private s_gameState; // If the jackpot is open for entries or not (state)\n    uint256 private s_gameStartTimeStamp; // the timestamp when the second player has entered the jackpot\n    address private s_recentWinnerAddress; // The last winner of the jackpot (state)\n    uint256 private s_recentWinnerAmount; // Last winner Jackpot Amount\n    uint256 private s_recentWinnerEntry; // Last winner Jackpot entry amount to calculate his earnings in percent (\"550% WIN!\")\n\n    // Events\n    event JackpotEnter(address indexed player, uint256 amount);\n    event RequestedJackpotWinner(uint256 indexed requestId);\n    event WinnerPicked(\n        address indexed winner,\n        uint256 indexed rndNumber,\n        uint256 indexed indexOfWinningBalance,\n        uint256 contractStartingBalance\n    );\n    event GameFeeTransfered(uint256 amount);\n    event ResetGame();\n\n    constructor(\n        address vrfCoordinatorV2,\n        bytes32 gasLane,\n        uint64 subscriptionId,\n        uint32 callbackGasLimit,\n        uint256 entranceFee_min,\n        uint256 entranceFee_max,\n        uint32 winRate,\n        uint256 gameTime\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\n        // Set VRF Variables\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\n        i_gasLane = gasLane;\n        i_subscriptionId = subscriptionId;\n        i_callbackGasLimit = callbackGasLimit;\n        // Set Game Immutables\n        i_owner = payable(msg.sender);\n        i_entranceFee_min = entranceFee_min;\n        i_entranceFee_max = entranceFee_max;\n        i_winRate = winRate;\n        i_gameTime = gameTime;\n        // Set Stage Variables\n        s_gameState = GameState.WAITING;\n        s_gameStartTimeStamp = block.timestamp;\n    }\n\n    function enterJackpot() public payable {\n        if (msg.value < i_entranceFee_min) {\n            revert Jackpot_NotEnoughEthEntered();\n        }\n        uint256 entranceAmount = s_addressToAmount[msg.sender] + msg.value;\n        if (entranceAmount > i_entranceFee_max) {\n            revert Jackpot_TooMuchEthEntered();\n        }\n        if (s_gameState == GameState.CALCULATING) {\n            revert Jackpot_NotOpen();\n        }\n\n        // Player can enter the Jackpot!\n        if (s_addressToAmount[msg.sender] == 0) {\n            s_players.push(payable(msg.sender));\n        }\n        s_addressToAmount[msg.sender] = entranceAmount;\n\n        // Change the state of the game from waiting to open, if there is more then one player\n        if (s_gameState == GameState.WAITING && s_players.length > 1) {\n            s_gameStartTimeStamp = block.timestamp;\n            s_gameState = GameState.OPEN;\n        }\n\n        emit JackpotEnter(msg.sender, entranceAmount);\n    }\n\n    // checkUpkeep should check, if perform upkeep should be performed, because two players have entered the game\n    function checkUpkeep(\n        bytes memory checkData\n    ) public override returns (bool upkeepNeeded, bytes memory /*performData*/) {\n        bool isOpen = (s_gameState == GameState.OPEN);\n        bool timePassed = (block.timestamp - s_gameStartTimeStamp) > i_gameTime;\n        bool hasPlayers = (s_players.length > 1);\n        bool hasBalance = address(this).balance >= (i_entranceFee_min * 2);\n\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\n    }\n\n    // perform Upkeep is the function that will be called, when checkUpkeep has turned true\n    function performUpkeep(bytes calldata /* performData */) external override {\n        (bool upkeepNeeded, ) = checkUpkeep(\"\");\n        if (!upkeepNeeded) {\n            revert Jackpot_UpkeepNotNeeded(address(this).balance, s_players.length, uint256(s_gameState));\n        }\n        // Jackpot closed!\n        s_gameState = GameState.CALCULATING;\n\n        // Request Random Number\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\n            i_gasLane,\n            i_subscriptionId,\n            REQUEST_CONFIRMATIONS,\n            i_callbackGasLimit,\n            RANDOM_WORDS\n        );\n\n        emit RequestedJackpotWinner(requestId);\n    }\n\n    function ResetLottery() external {\n        if (msg.sender != i_owner) {\n            revert Jackpot_NotOwner();\n        }\n        for (uint256 i = 0; i < s_players.length; i++) {\n            address payable refundAddress = s_players[i];\n            uint256 refundBalance = s_addressToAmount[refundAddress];\n\n            s_addressToAmount[s_players[i]] = 0;\n            (bool successRefund, ) = refundAddress.call{value: refundBalance}(\"\");\n            s_addressToAmount[refundAddress] = 0;\n        }\n        s_gameState = GameState.WAITING;\n        s_players = new address payable[](0);\n        s_gameStartTimeStamp = block.timestamp;\n\n        emit ResetGame();\n    }\n\n    function fulfillRandomWords(uint256 /* requestId */, uint256[] memory randomWords) internal override {\n        uint256 contractStartingBalance = address(this).balance;\n        uint256 indexOfWinningBalance = randomWords[0] % contractStartingBalance;\n        uint256 getWinningBalance = 0;\n        bool foundWinner = false;\n        uint256 indexOfWinner = 0;\n        for (uint256 i = 0; i < s_players.length; i++) {\n            getWinningBalance += s_addressToAmount[s_players[i]];\n            if (indexOfWinningBalance <= getWinningBalance) {\n                indexOfWinner = i;\n                foundWinner = true;\n                break;\n            }\n        }\n        if (!foundWinner) {\n            revert Jackpot__NoWinnerFound(randomWords[0]);\n        }\n        // Winner found!\n        address payable winner = s_players[indexOfWinner];\n        uint256 winningAmount = (address(this).balance * i_winRate) / 100;\n\n        // Set Winner in storage\n        s_recentWinnerAddress = winner;\n        s_recentWinnerEntry = s_addressToAmount[winner];\n        s_recentWinnerAmount = winningAmount;\n        // Reset Game\n        s_gameState = GameState.WAITING;\n        for (uint256 i = 0; i < s_players.length; i++) {\n            s_addressToAmount[s_players[i]] = 0;\n        }\n        s_players = new address payable[](0);\n        s_gameStartTimeStamp = block.timestamp;\n        (bool success, ) = winner.call{value: winningAmount}(\"\");\n        if (!success) {\n            revert Jackpot_TansferToWinnerFailed(winner, winningAmount);\n        }\n        emit WinnerPicked(winner, randomWords[0], indexOfWinningBalance, contractStartingBalance);\n\n        uint256 gameFee = address(this).balance;\n        (bool successFee, ) = i_owner.call{value: address(this).balance}(\"\");\n        if (!successFee) {\n            revert Jackpot_TansferToOwnerFailed(gameFee);\n        }\n        emit GameFeeTransfered(gameFee);\n    }\n\n    // View / Pure Functions\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getEntranceFeeMin() public view returns (uint256) {\n        return i_entranceFee_min;\n    }\n\n    function getEntranceFeeMax() public view returns (uint256) {\n        return i_entranceFee_max;\n    }\n\n    function getWinRate() public view returns (uint32) {\n        return i_winRate;\n    }\n\n    function getGameTime() public view returns (uint256) {\n        return i_gameTime;\n    }\n\n    function getGameState() public view returns (GameState) {\n        return s_gameState;\n    }\n\n    function getAddressToAmount(address player) public view returns (uint256) {\n        return s_addressToAmount[player];\n    }\n\n    function getPlayersAmount() public view returns (uint256) {\n        return s_players.length;\n    }\n\n    function getPlayerAtIndex(uint256 index) public view returns (address) {\n        return s_players[index];\n    }\n\n    function getGameStartTimeStamp() public view returns (uint256) {\n        return s_gameStartTimeStamp;\n    }\n\n    function getRecentWinner() public view returns (address) {\n        return s_recentWinnerAddress;\n    }\n\n    function getRecentWinnerAmount() public view returns (uint256) {\n        return s_recentWinnerAmount;\n    }\n\n    function getRecentWinnerEntry() public view returns (uint256) {\n        return s_recentWinnerEntry;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
